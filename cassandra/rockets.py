import numpy as np
from cassandra.physics.kinematics import FreeBody, CompositeBody, Measurable, Loggable
from cassandra.components import Frame, MotorMount
from cassandra.motors import UniformMotor
from cassandra.control import DummySoftware, RandomSoftware


class Rocket(FreeBody, CompositeBody, Measurable, Loggable):
  """
  A TVC controlled rocket.
  
  Parameters
  ----------
  kinematics : Kinematics
    The kinematics of the rocket.
  software : FlightSoftware
    The software guiding the rocket.
  mount : MotorMount
    The mount where the burning motor is attached.

  Attributes
  ----------
  kinematics : Kinematics
    The kinematics of the rocket.
  software : FlightSoftware
    The software guiding the rocket.
  mount : MotorMount
    The mount where the burning motor is attached.
  """

  def __init__(self, software, components, *args, **kwargs):
    assert 'mount' in components
    self.software = software
    super().__init__(components=components, *args, **kwargs)

  @property
  def mount(self):
    """
    Retrieve the rocket's mount from its components.
    """
    return self.components.get('mount', None)

  def measure(self):
    """
    Probe the current state of the rocket.

    Returns
    -------
    dict
      Relevant physical measurements performed on the rocket.
    """
    ret = {
      'ang_velocity': self.ang_velocity,
      'altitude': self.position[2],
    }
    return ret

  def status(self):
    return {
      'cm_position': self.position,
      'cm_orientation': self.orientation
    }

  def attach_motor(self, motor):
    """
    Attach a motor to the rocket.

    Parameters
    ----------
    motor : Motor
      The motor to be attached.
    """
    self.mount.attach_motor(motor)

  def detach_motor(self):
    """
    Detach any motors from the rocket.
    """
    self.mount.detach_motor()

  def thrust(self, time=None):
    """
    Get the thrust generated at a certain time.

    Parameters
    ----------
    time : scalar or None
      The time at which to calculate total thrust.

    Returns
    -------
    Force or None
      The eventual force generated by the thruster.
    """
    return self.mount.thrust()

  def external_forces(self):
    """dict: The external forces acting on the rocket."""
    ret = {}
    thrust = self.thrust()
    if thrust:
      ret.update({'thrust': thrust})
    return ret

  def update(self, timestep, integrator):
    """
    Update the rocket according to a certain ellapsed time.

    Parameters
    ----------
    timestep : scalar
      The time ellapsed since the last update.
    integrator : Integrator
      The integrator to use for numerical integration

    Returns
    -------
    dict
      The data of the different components of the motor at the current point in time.
    """
    measurements = self.measure()
    self.software.update(timestep, self, measurements)
    
    data = super().update(timestep, integrator)
    return data


class OrbitingRocket(Rocket):
  """
  A rocket with no gravity.
  """

  def __init__(self, software, components, *args, **kwargs):
    super().__init__(software=software, components=components, gravity=Gravity(0), *args, **kwargs)


class SimpleRocket(Rocket):
  """
  A simple ready-to-use rocket with default values.
  """

  def __init__(self, *args, **kwargs):
    motor = UniformMotor(25, 5)
    frame = Frame()
    mount = MotorMount(position=np.array([0, 0, -0.5]))
    mount.attach_motor(motor)

    software = DummySoftware(0.5)

    components = {
      'frame': frame,
      'mount': mount
    }
    
    super().__init__(software=software, components=components, *args, **kwargs)


class RandomRocket(Rocket):
  """
  A simple rocket that manoeuvers randomly accross space
  """

  def __init__(self, *args, **kwargs):
    motor = UniformMotor(25, 5)
    frame = Frame()
    mount = MotorMount(position=np.array([0, 0, -0.5]))
    mount.attach_motor(motor)

    software = RandomSoftware(0.5)

    components = {
      'frame': frame,
      'mount': mount
    }

    super().__init__(software=software, components=components, *args, **kwargs)