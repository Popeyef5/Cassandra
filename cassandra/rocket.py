import numpy as np

class Rocket:
  """
  A TVC controlled rocket.
  
  Parameters
  ----------
  kinematics : Kinematics
    The kinematics of the rocket.
  software : FlightSoftware
    The software guiding the rocket.
  mount : MotorMount
    The mount where the burning motor is attached.

  Attributes
  ----------
  kinematics : Kinematics
    The kinematics of the rocket.
  software : FlightSoftware
    The software guiding the rocket.
  mount : MotorMount
    The mount where the burning motor is attached.
  """

  def __init__(self, kinematics, software, mount): 
    self.kinematics = kinematics 
    self.mount = mount
    self.software = software 

  def attach_motor(self, motor):
    """
    Attach a motor to the rocket.

    Parameters
    ----------
    motor : Motor
      The motor to be attached.
    """
    self.mount.attach_motor(motor)

  def detach_motor(self):
    """
    Detach any motors from the rocket.
    """
    self.mount.detach_motor()

  def thrust(self, timestep):
    """
    Get the thrust generated in a certain time.

    Parameters
    ----------
    timestep : scalar
      The time ellapsed to calculate total thrust.

    Returns
    -------
    Force or None
      The eventual force generated by the thruster.
    """
    return self.mount.thrust(timestep)

  def update(self, timestep):
    """
    Update the rocket according to a certain ellapsed time.

    Parameters
    ----------
    timestep : scalar
      The time ellapsed since the last update.

    Returns
    -------
    dict
      The data of the different components of the motor at the current point in time.
    """
    ext_forces = {} #Room for more 

    measurements = self.kinematics.measure()
    self.software.update(timestep, self, measurements)
    
    thrust = self.thrust(timestep)
    self.mount.update(timestep)

    if thrust:
      ext_forces['thrust'] = thrust

    data = self.kinematics.update(timestep, ext_forces)
    data.update({'thrust': thrust})
    return data
